# On March 25, 2025, I had read 70% of ABS guide,
# then I realized that I needed to read it again and take as many notes as possible.
# IMPORTANT MATERIAL AND TOOLS: ABS-GUIDE, MAN BASH, INFO BASH, BASH SOURCE CODE, GPT, MY INTELLIGENCE
# Always check bash manner to acknowledge exact definition of bash components.

4/13/25补充:
Shell programming works like a glue which piece together all components of my system.
Writing shell script can also be likened to do orchestration.
So I need to learn bash as well as common UNIX commands.

chapter 1 Introduction

I think it is better to read it with the very first chapters of \`bash info\'.
Keywords: Posix, Unix, Shell, Bash, Ksh

Unix shell can interpreter command and execute it.
It provides tons of system utilities and builtin functions for user interface.

Shell, as in interactive mode and non-interactive mode:
What tasks can I accomplish with an interactive shell?
Type command from keyboard and execute them, get result.

What tasks can I accomplish with an non-interactive shell?
Combine system utilities and create powerful script to accomplish complex system tasks.

1. System administrators often write scripts to automate common
tasks. Give several instances where such scripts would be useful.

(1) : Write startup scripts to autoload network configuration files, such as proxy...
(2) : Execute scheduled tasks, such as archiving and cleaning log files. 
(3) : System monitor, e.g. use top to get process statistics and record.

2. Write a script that upon invocation shows the time and date,
   lists all logged-in users, and gives the system uptime. The
   script then saves this information to a logfile.

#!/bin/bash
exec >>~/dummy_logs # 重定向 stdout, 以append模式写入 ~/dummy_logs, 之后的子进程都继承stdout
date; w; uptime;
echo; echo; echo;
exit



chapter 3

character?
literal meaning <-> meta meaning

一个字符可能有多重意义，一个字符在未引用时可能被shell或其他工具赋予其它功能
It is ok to use the literal meaning of a character by escaping or quoting.

One command line is a string, metacharacter separate it to parts, and shell interprete it.

Q: shell展开命令的顺序是什么？ THIS IS VERY IMPORTANT.
一行指令里有variable susbtitution, parameter substitution, command substitution, process substitution时候，
最终得到的字符串是以什么顺序展开的呢？

Very useful yet interesting examples:
eval 'echo `echo "$"{a..b}`'
eval "echo `echo '$'{a..b}`"

关于这个主题的gpt解答:
`command substitution`这种方式会在启动subshell执行命令前先过滤掉backslash
$(command substitution) 这种方式不会

除此之外，$()允许嵌套且可读性好。

我认为，如果command比较简单，比如用tty获取当前终端设备号，那么用``进行command substitution是合适的，如果
command包含复杂的逻辑，比如parameter substitution或者pipe，那么就用$()

还有 parameter/variable expansion 发生在command substitution之前,
所以command substitution的结果中包含的$var 不会被展开

算术展开(()) 在parameter/variable、command substitution 之后。
所以，
在(())结构中使用变量和命令替换 ok。

非字面量的引号 \' \" removal 发生在最后。

通过 $> set -x
观察复杂指令的展开过程
展开顺序 **非常重要**

It seems that bash $' ... ' structure has the same function as escaped character...
But it can even translate original character to unicode character.

$' ... ' 结构有点像"echo -e" 转义, 但是它是展开时就完成转义
用这个可以观察细节
set -x; echo $'\n'
set -x; echo -e '\n'

set +x; # Done

()structure without assignment starts a subshell, in normal case,
the parent bash process cannot access the variable defined in it,
however, we can use process substitution or redirect the output ( to a file ) to get values in it.

Brace expansion will not occur in a quote!
But when it appears in a quote within command substitution, it will happen.

Compare:
echo \|{a..z}\|
echo \| {a..z} \|

Q: 对一个字符串进行base64编码，最终结果可能出现几种字符?
base64编码包括哪64个字符？剩下的那一个字符是什么？有什么用？

base64编码的原理是什么
The base64 encoded form uses printable ASCII chars to represent binary data

About {} structure, from ABS guide:
{ local a; a=233 }; echo $a # ok
local a; a=233 # WRONG! Output an error message

Also from ABS guide:
输入输出重定向将对block 内的所有command生效, 如果一大块代码需要进行重定向，
考虑{ ... } <> fd 结构

difference between '[' and '[[' structure
According to ABS guide, '[[' is more flexible, and...
'[' is a shell builtin ( imagine a function )
'[[' is a shell keyword.
What\'s the difference between builtin and a keyword?
This example illustrate the difference:
eval "[() { echo hello; }; [" # hello
eval "[[() { echo hello; }; [[" # Output error message.
eval "for() { echo 'for is a keyword so this will not output'; }; for" # as mentioned above
eval "while() { echo 'while is a keyword so this will not output'; }; while" # as mentioned above
eval "@() { echo @ is not a keyword; }; @"
Errrrr.... It seems function name restriction is looser than those for variable.

About I/O redirection
一个比较细致的点:
/dev/pts /dev/tty 是(字符)流设备
/path/to/file 是普通文件
流设备中的数据有即时性，写入缓冲区后可立刻供消费端读取, 这又叫做流式读写。
(所以管道两端连接终端设备时可以流畅地串联若干指令，标准流默认都指向终端设备！
一旦在管道中重定向到普通文件，之后的指令无法从标准流中读取数据。即使你把输入流指向文件)
For example:

tty | cat # /dev/pts/X, OK.
tty >./out | cat  # Nothing, 'cause it write output to a file and stdin get nothing from pts.
tty >./out | cat <./out # Nothing, but there is a critical question
tty >>./out | cat <./out
# /dev/pts/X
cat ./out
# /dev/pts/X
# /dev/pts/X
interesting...

tty >./out ; cat <./out # OK, but why? Explain it.
回到这个关键问题：
在shell中在管道中启动两个进程同时读或写一个文件的内容，其行为究竟受什么影响？
我认为其实是受到两个命令执行速度的影响。两个进程实际上不会共享读写文件时的偏移量。
使用shell向linux的文件系统中写入数据，不会发生数据竞争问题，这已经经过时间验证。
shell为管道两边的命令启动subshell并执行，然后连接他们的输出/输入。
如果读取文件的进程执行得较快，它就能输出另一进程修改之前的文件内容。

tty >./out | cat <./out # No output
echo hello >./out | cat <./out # output hello; echo 是builtin, 比cat快得多
echo hello | cat >./out | cat <./out # 偶尔能输出hello :))))

如果想保证读写顺序，用&& 或 || 连接两个命令
关于转义'\r'
echo -e '     you\rkick' # yet rude

yet another interesting fact of IO redirection:
tar cf /dev/stdout . | wc -l # 输出一个数字
tar cf `tty` . | wc -l # 输出一堆东西 然后输出0
然后
tar cf - . 与 tar cf /dev/stdout . 是等价的 ( of course ! )

终端击键Ctrl + D，内核通知EOF,将会退出交互式shell
EOF没有具体的ascii码值

There is a personal clarification about UNIX characters...
Ascii characters can be divided to printable and nonprintable chars;
All printable chars have a literal meaning, as it is.
Some of printable chars have a 'meta' meaning in certain context...
For instance, in bash '~' is refered to $HOME, in cd '-' is refered to $OLDPWD,
'^' and '$' are anchors in regular expression, and most importantly, they have
profound meaning in a vim editor! :)
Nonprintable chars are often used for change behavior of line editing.

Ascii code 1-26 correspond to Ctrl+{A..Z}

shell没有图形输出功能，所以shell必须与terminal结合才能构成基础的用户界面.
shell从标准输入中获取数据，把输出打印到标准输出流，由于默认情况下，标准输入与标准输出
都指向了终端设备，我们才能在显示器上看到输入输出的字符。

GPT wisdom and lore:
控制字符的行为由shell & terminal emulator( or console driver )共同决定。

一些指令，帮助理解shell & terminal在解析控制字符时候的合作：
$> stty -a
intr = ^C; quit = ^\ ...
start = ^Q; stop = ^S ...

$> read -n 1
然后尝试输入控制字符 Ctrl + [A-Z]
Ctrl + C, Ctrl + J, Ctrl + M, Ctrl + Q, Ctrl + S, Ctrl + Z无响应
PS: 如果使用vim terminal, Ctrl + W 后再输入 . 才有响应(why?)

Ctrl + C : Interuppt 中断当前read
Ctrl + J : Line Feed 被shell line editor捕获
Ctrl + M : Carriage Return 同样被line editor捕获
Ctrl + Q : Restart, 被terminal捕获？
Ctrl + S : Stop, 被terminal捕获？
Ctrl + Z : Suspend

由此可见，简单场景下，用户通过键盘发射的原始信号经历了这样的链路：
Keyboard MCU -> Kernel -> Terminal -> Shell -> Foreground program
我认为printable字符也是以这种方式被传输的，但是printable字符不会被terminal解释,
可能被shell解释 ( 比如vi mode )
在交互式shell中输入line feed后，把行缓冲区域的内容提交给shell执行，
shell内部会对这些字符进行进一步的处理

但为什么 Ctrl + H 可以响应???
Ctrl + H & Ctrl + ? 可以响应，说明退格是shell内部行为, 类似vi mode?????

为什么说 'Control characters are not normally useful inside a script.' 呢
因为Control chars被terminal、shell的行编辑器解释执行，在非交互shell中没有特殊意义。

使用`echo`输出Carrige Return的三种方式:
$> echo -e '\r' # C 转义
$> echo $'\x0d' # Hex equivalent
$> echo "^M"    # Ctrl-V Ctrl-M

export IFS 对子进程中的shell无效

chapter 4

IFS分隔在 variable substitution / command substitution 时发生
shell变量可以类比为左右值?

输出 十进制 1 ~ 128 对应的ascii字符:
for i in `seq 1 128`; do
    h=$(printf "%x" $i)
    v=$(echo -e "\x$h")
    echo "$v"
done
yet another gpt wisdom:
Ascii characters:
Null		0x00
Control chars	0x01 ~ 0x1F
Printable	0x20 ~ 0x7E
DEL		0x7F

An example of indirect reference and position parameter:
for i in `seq 1 10`; do
    echo $i; done
for i in `seq 1 10`; do
    echo ${!i}; done

IFS have an effect on command substitution & variable substitution

Characters within double quote will remain literature meaning except '$' '\' and '`'

Yet another example of 'quote':
a=$'\n123\n456'
echo "$(echo $a)"
echo "$(echo "$a")"
这说明了什么?
echo "foo"$a"bar"

现在有一个疑问:
echo "\n" # output \n
echo "\$" # output $
那么escape会对那些chars生效呢:
\\ \` \$ \"

分辨shell转义和command转义：
概念: 通过前缀转义符'\', 某些字符获得了不同的含义，在交互式shell中输入一行指令之后，
首先shell会对这行指令进行转义，将参数传入command后，这些字符可能被command再度转义。
echo '\n' # \n 两个字符作为参数传入echo
echo -e '\n' # 同样的 \n 被传入echo, 但是echo打开了转义选项, 最终输出两个Line Feed

a='abc^H' # ^H is Ctrl-V Ctrl-H, or $'\x08' or '\b'
echo $a
echo -n $a
这说明什么?

关于结构 from `man bash`
if list; then list; [ elif list; then list; ] ... [ else list; ] fi
list 也可以是if 语句,所以下面的代码有效:
if if if [ c ]; then :; fi; then :; fi; then echo farboo; fi # Strike!
这段代码也有效 ':)'
if
a=1
b=2
c=3
((a+b\
==c))
then
echo \
1
else
echo \
2
fi

When naked typed, asterisk('*') has behavior in single bracket and double bracket
test construct.

[ $a = * ] # file globbing will take place
[[ $a = * ]] # partial pattern match, * ? Posix classes make sense

关于 "[" test command 还有一个有趣的细节:
We have already acknowleged that ! reverse the exit state of a command,
but what about '!' within a [ ] construct, what will happen if we combine them?

[ 1 -eq 1 ] && echo True # True
! [ 1 -eq 1] && echo True || echo False # False
! [ ! 1 -eq 1 ] && echo True # True :)

Yet another trick of test command:
[ 1 -eq 2 -a -n "`echo true 1>&2`" ] # Output: true
echo $? # 1

Step 1: echo true 1>&2 # Command Substitution 输出True至终端
Step 2: [ 1 -eq 2 -a -n "" ]

为什么 [[ list1 && list2 ]] 符合短路原则？Why? Tell me why.
What is the difference between '[[' and '['?

chapter 8.2
关于数字常量，一直以来有一个被我忽视的细节:
a=010
echo $a # 010
((a=010))
echo $a # 8
((a=0x10))
echo $a # 16
((a=2#010))
echo $a # 2

分辨数字常量与$' ... ' string-expansion
octal-based and hex-based numberial constants are used in arithmetic expressions

About linux filesystem file mode:
1. You can always check the detail through 'man chmod'
2. Apart from common 'r(ead) w(rite) e(xecute)' file mode, there are setuid/setgid and sticky bit.
3. Execute mode bit in a directory file means it can be searched and entered.
4. setuid/setgid bit is for a regular, executable file, it means other users can execute this file as is its user or group.
5. sticky bit if for a directory, if set, only file owners can delete or rename files within this directory.

chapter 9

关于builtin variables:
$> set 
该命令可以输出所有内建的环境变量,假设想查看BASH开头的所有内建环境变量，可以执行
$> set | grep '^BASH'

printf命令默认对入参执行C风格转义

Yet ANOTHER GPT wisdom:
I wanna to know the difference and precedence of "shell alias, keyword, builtin, hashed command and external command"

First hashed command is a typed command which will be memorized by shell, next time when invoke this command, shell will use its memory, instead of searching PATH.
严格说来, builtin 和 external binary 才算是command吧！

MAX PRECEDENCE
alias
keyword
builtin function
hashed command
external command
MIN PRECEDENCE

alias if='echo hahahahahah'
$> if # hahahahahah
unalias if
$> if # will not output anything
$> if() # syntax error

别名(alias)优先级最高，它不是command
关键字(keyword)拥有语义，构成shell语法结构,也不是command
内建命令(builtin)是shell实现的若干功能，为了减少子进程创建开销(每次执行external command都会拉起外部进程)
缓存命令(hashed command)，当一个命令被执行之后，shell会记录这个命令的位置，下次调用时就会使用缓存的路径而不是再次查询。

Difference between $EUID and $UID
EUID stands for Effective UID, it shows who are running this shell script.
但是在现代unix-like系统的脚本中无法区分EUID和UID,容易被提权攻击
所以似乎EUID is useless...

关于$* $@ and 变量展开
set "a                  b" c # set positional parameter
for i in $*; do echo $i; done
for i in $@; do echo $i; done
for i in $@; do echo "$i"; done
for i in $*; do echo "$i"; done

for i in "$*"; do echo $i; done
for i in "$*"; do echo "$i"; done
for i in "$@"; do echo $i; done
for i in "$@"; do echo "$i"; done

$> IFS=$'\n'
$> a=$'a\nb\nc\nd\n'
$> echo $a
$> echo "$a"

If the variable is expanded without double quoted, it will be separated through $IFS,
the result strings will be concatenated with a single space. THEN PASSED TO COMMAND?

"$*":
结果是把所有形参用IFS中的第一个字符拼起来的字符串
$> set a b  b    c     c       c
$> IFS='^'
$> echo "$*" # a^b^b^c^c^c

$> set "a" "b b" "c c c"
$> IFS='^'
$> echo "$*" # a^b b^c c c

$*:

# Todo: Compare
# $> IFS='^'
# $> set a b^b c c^c
# $> set a "b^b" "c c^c"
# $> a="a b^b c c^c"
# $> echo $a
# $> echo "$a"
# $> for i in $a; do echo $i; done

IFS_ARR=( $'^' $' ^' )
for iter in ${IFS_ARR[@]} ...
for iter in "${IFS_ARR[@]}" ...
for iter in "${IFS_ARR[*]}" ...
有什么不同之处
Compare it with positional parameters, what can we conclude?

Positional parameters puzzles :)

IFS=$'\n \t' # Just adjust the order of original IFS
set a 'b^b' '' 'c c^c'

echo $*
echo "$*"
echo $@
echo "$@"
v=$*
echo "$v"
echo $v
v="$*"
echo "$v"
echo $v
v=$@
echo "$v"
echo $v
v="$@"
echo "$v"
echo $v

Observation 1: "$*" 会把所有parameters用第一个IFS拼接起来, "$@"保留了其作为数组的性质
证据:
arr=( "$*" ) ; echo ${#arr[@]}; # 1
arr=( "$@" ) ; echo ${#arr[@]}; # 4

关于 [[ =~ ]] 结构: 右侧的extended regular expression被引用后可能产生错误的结果!
$> [[ heheda =~ ^h ]] && echo "Matched!" || echo "Not matched!" # Matched!
$> [[ heheda =~ "^h" ]] && echo "Matched!" || echo "Not matched!" # Not matched!

Tilde expansion的条件:
echo ~ # ok
echo ~/ # ok
echo ~a # ~a
echo a~ # ok

Yet another gpt wisdom:
The order of shell expansion:
Brace expansion
tilde expansion
variable expansion / parameter substitution
arithmetic expansion
command substitution
process substitution
word splitting
filename globbing
quote removal

关于positional parameters的一个神奇现象:
$> set a bb ccc
$> echo ${@:2} # bb ccc
$> a=( $@ )
$> echo ${a[@]:2} # ccc

${var:=DEFAULT} will set var is it is unset
${var:-DEFAULT} will not

About parameterized:
Consider the difference between a shell variable and parameter.
考虑filename globbing的场景:
$> echo * # 列出**当前**目录下的所有文件。
$> cd /; echo *; # 列出**/**下的所有文件。
Is this a type of parametering?
The value of '*' varies on different directories, but a variable will keep its value regardless of its current working dir.

command substitution will remove all LineFeeds of the output.

Pattern rule in parameter substitution is different from posix regular expression.
Pattern:
* : Any characters
? : Exactly one character
[ ... ] : Character class

for ((;;)); do : ENTERNAL LOOP ; done

In case / esac construct, words will not be splitted?
So I am wondering, in which case, the word splitting will take place.

Use variable / parameter / command substitution without quoting will lead to word splitting.
Use these techniques with in case / esac and [[ ]] double bracket will NOT.

What about POSIX ranges?

Exercise:
列出/bin/下所有包含三个任意字符的executable binary.
$> ls /bin/???

列出/bin/下包含三个大小写英文字母的executable binary.
$> ls /bin/[[:alpha:]][[:alpha:]][[:alpha:]] # 1
$> ls /bin/ | grep -E '^[a-zA-Z]{3,3}$' # What is the difference between this one and above one?
区别在于ls的行为:
ls /path/to/file # list the file full path
ls /path/to/dir  # list all files in the dir, without prefix dirname
略施小计:
$> ls /bin/* | grep -E '/[a-zA-Z]{3,3}$'
有没有可能被hack呢?

Conclusion:
In bash, posix regular expression will not work in file globbing, but posix character ranges will.

Can we parameterize case-branch items?
a="just a variable"
b=just
case $a in
    $b*) echo ok;;
esac
# ok
but,
case $a in
    "$b*") echo ok;;
esac
# Nok, 'cause of the escaped asterisk
Conclude: Pattern matching takes place in case-esac construct.

What\'s more
case a b c in  # Error message, case语法只支持single word, 不可以被whitespaces分隔

Let\'s have a look at the definition of case-esac construct from 'man bash':
case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac
As it describes:
The word is expanded using tilde expansion, parameter and variable expansion, arithmetic expansion, command substituion, process substitution and quote removal.
*brace expansion , file globbing , word splitting* are absent.

Yet another question!
Will 'echo' do extra process to manupulate its input? NO, unless '-e' is passed to it.

Variable substitution的结果是一个关键字会怎样呢?
$> a=if
$> $a [ 1 = 1 ]; then echo ok! ; fi
# BOOOOOOOM!
说明变量替换在词法分析之后？
Meanwhile,
$> alias a=if
$> a [ 1 = 1 ]; then echo ok !; fi
# ok !
说明别名展开在词法分析之前?

Variable assignment中，shell expansion的情况:
Brace expansion			    NO
Tilde expansion			    YES
Variable / Parameter substitution   YES
Arithmetic subsitution		    YES
Command substitution		    YES
Process substitution		    YES
Word splitting			    NO
Filename globbing		    NO
Quote removal			    NO NEED?

一种列出当前目录下含有'不寻常'字符的文件名的方法, 很秀
$> ls *[^[:alnum:].]*
然后与这个做比较:
$> echo *[^[:alnum:].]*

Any character may appear in a linux-filesystem filename except a slash, \'cause it is a path separator

Part 4 Commands
for is a keyword, but break and continue and return are builtin...
What is POSIX character class and POSIX regular expression.

Tell the difference between GNU tar and GNU ar.
From GPT:
tar can do file compressed as well as archive, ar can only do archive.
However, tar is mainly used of archiving user file and do system migration,
ar is mainly used for modifying static linked library.

About parameters of \'basename\' and filename globbing of bash:
$> pushd `mktemp -d` ; touch a b ; basename * ; popd ; # ok
$> pushd `mktemp -d` ; touch a b c ; basename * ; popd ; # Error occurs, why?

$> enable # list all bash builtin commands as well as their status enable is a bash builtin that controls the behavior of other builtins

前台进程组概念:
交互式shell维护的前台进程列表，键盘输入Ctrl-C后，终端发送内核级的INTERRUPT信号，顶层shell终止前台进程组内的所有进程。

About a weird behavior of read builtin:
$> read var
			here
$> echo "$var" # here

$> read
			here without specify a name
$> echol "$REPLY" #                        here

Note the space in the above output.
Consider changing the value of IFS to avoid word splitting in read command.

What is the predence of a shell function ?
I can confirm that it is less than a alias, but what about keyword, builtin and external command?
It is impossible to declare a function which uses a keyword as its name.
Predence(maybe):
alias > keyword > function > builtin > hashed command > external command searching from $PATH

Distinguish special filesystem components and shell environment variables and shell builtin.
. ( dot ) , $PWD , pwd

$> ln -s ~ ./point_to_home
$> cd point_to_home
$> echo $PWD
$> pwd

The contents in a tarball is relatively packaged.
It can be likened to a filesystem tree, when successfully untar, the two trees merge into one.
Let\'s consider an example
~/tmp $> ls # Assume we have three common files named a, b, c
a b c
~/tmp $> tar cf tarball .
~/tmp $> tar tf tarball
a
b
c
~/tmp $> tar cf tarball2 ../tmp
~/tmp $> tar tf tarball2
tmp/
tmp/a
tmp/b
tmp/c

About current working directory:
Every process has its cwd, which inherits from parent process.
Change the cwd of child will not influence parent.
$> ( cd / ; echo `pwd` ; )
$> pwd
On arithmetic calculation, use 'let' and '(())' construct instead of 'expr', just \'cause let is a builtin, (()) is a keyword structure

Maybe the main use scene of 'eval' is executing parameterized commands.
Use eval to implement indirect variable assignment.

$> a=1 # ok
$> b=a
$> $b=2
bash: a=2: command not found

It is clear that assignment statement is different from running commands in shell!

$> b=a
$> eval "$b"=3
$> echo $a
3
Parameterized code generation!

From abs:
The eval command can be used to parameterize brace expansion.
Because brace expansion is happening before variable substitution!
$> a=1 b=10
$> echo {${a}..${b}}
{1..10}
$> a=1 b=10
$> eval echo {${a}..${b}}
1 2 3 4 5 6 7 8 9 10

sharp('#') is interpretered as the start notion of a comment, following chars will be ignored,
this step is taking place upon lexical analysis, before command execution.

word splitting会对字面量生效么？
对字面量的分隔是否在lexical analysis阶段就已完成？

Gpt wisdom:
Escaping takes place on lexical analysis.

Can not directly export bash arrays to subprocess.

A personal viewpoint of 'arguments' of command interpreter, with help of gpt, of course.
Command line arguments: all words passed to shell, considering them as a string list
Positional parameters: parsed arguments, which can be used in a command line or script
Command line options: parsed again arguments, always have special meanings

Punctuation builtin:
. ( source ) , : ( colon no-op ) , \[ ( test )

About bash FUNCNAME variable:
$> a () { echo ${FUNCNAME[@]} ; }
$> b () { a ; }
$> b
a b

区分命令执行环境 & 进程上下文环境
The 'command execution environment' aspect correspond to a subprocess, whereas context environment correspond to a inner process behavior
Command execution environment contains:
Open files ( file description ), cwd, file creation mode, kernel signal traps,
shell parameters and functions, shell options, shopt options, alias..

Context environment 告诉用户这行命令现在在何处执行, 概念类似call stack

Why did Bash introduce the 'shopt' command instead of just using 'set'?
Gpt wisdom:
set [ builtin ] controls more historical shell behavior
shopt [ builtin ] controls more experimental bash functions
一句话: set / shopt 分别对应Posix兼容性功能开关与实验性功能开关

Note: '!' is not a shell builtin but is a keyword.

A usage of builtin bind, assume that vi readline mode is on.
$> bind -m vi-insert '"\C-b": "\C-ucd ..\n"' # Hot-key to cd back to parent dir quickly.
# Play with bash's readline library

用 dotfile + symlink + git 目录管理配置文件, 感觉是个不错的实践。

Using wait with only one background job is SYNCHRONOUS,
Using wait with multi background jobs is ASYNCHRONOUS.

Call external command in a startup script is not a good practice.

[ MAN BASH KNOWLEDGE ]:

How to determine whether 'i' option in $-?
Approach 1 : [[ $- =~ i ]] && echo "Contains"
Approach 2 : echo $- | grep -q i && echo "Contains"
Approach 3 : [[ $- == *i* ]] && echo "Contains"
Approach 4 : case $- in *i*) echo "Contains" ;; esac

simple command is a special case of a pipeline?

Shell grammar list:
A list is a sequence of one or more pipelines separated by one of the operators...
That means, wherever a LIST shows in a grammar, it CAN contain one or more pipelines.

About multi && || behavior in shell grammar:
&& || 构成了shell list, 所有&& ||按从左到右的顺序解析, \'cause they have same precedence.
An example:
true && true || false && false ; echo $?
1

true && true || false && false
|	   |
+--  0   --+

true && true || false && false
|		    |
+--      0        --+
Note: 由于短路性质，false不执行

true && true || false && false
|			     |
+--           1            --+

Tell difference behavior of logical operators between Shell and C.

shell处理: 首先基于meta characters把文本分割为基本的语法单元，比如list, pipelines, command,
然后再通过keywords组织起语法结构? 然后展开,最后执行

'+=' stands for appending to shell variable and arrays
$> a=1
$> a+=2
$> echo $a
12

$> a=(1 2)
$> a+=(3)
$> echo "${a[@]}"
1 2 3

Differ shell parameter and variable:
Any entity associated to a value is a parameter.
Variable is a name that stores a variable, so it is a kind of parameter.
Besides variable, there are positional parameters and special character parameters.

$SHLVL: subshell不受影响
 
The output of top command in non-interactive mode will be affected by COLUMNS parameter
$> COLUMNS=20 top -bcn1 | less


From bash mannal:
The  order  of expansions is: brace expansion; tilde expansion, parameter and vari‐
able expansion, arithmetic expansion, and command substitution (done in a  left-to-
right fashion); word splitting; and pathname expansion.

tilde expansion, parameter & variable expansion, arithmetic expansion and command substitution take place simultaneously.

$> a='$((1+1))'
$> echo $a
$((1+1))

$> a='*'
$> echo $a
( all files in current working directory )

The order of tilda expansion, parameter substitution, arithmetic substitution and command substituion depends on nesting.

Note that if no expansion occurs, no splitting is performed.
$> echo a                   b
a b # 在词法分析？阶段就已完成。

Here document: \<<- will strip leading tabs of lines

From bash manual, a function\'s body is a LIST.
far()
{
    val=boo
}
$> far
$> echo $val # boo

In the mean time,
boo()
(
    val=boo
) # Is valid!
$> boo
$> echo $val # nothing.

考虑一个有趣的例子
$ a="echo barfoo"
$ $a
barfoo

whereas...

$ bar=foo
$ a="sh -c \"echo \$bar\""
$ $a
$bar" ... unexpected EOF while looking for matching "
考虑single command的展开、执行过程

kill 0: 杀死所有当前进程组里的进程

在tilix这种多路复用终端模拟器中退出一个shell不会导致内核发送SIGHUP, 把整个窗口关掉才会。
所以
$ sleep 666 &
$ exit
这样sleep进程还在后台运行，但是如果把tilix窗口关闭就会导致进程退出。
$ sleep 666 & disown
避免退出。(Thanks, GPT)

job control different behavior in interactive and non-interactive shell.
Intractive shell: Every background job has its own process group id
Non-intractive shell: Every background job has same pgid as the intepreter.
So kill 0 will take effect.

Job control is not enabled in non-interactive shell by default.

EOF或exit方式退出shell不会触发SIGHUP, 强制关闭终端模拟器窗口会触发SIGHUP

type time
type times
Compare the above two tokens.

Redirection must be presented before single-ampersand token(which is used to move the job to the background).

[[ 1 -le word ]] && echo BAR! ;
a=1
b=2
[[ a -le b ]] && echo true # output true
Conclusion: Shell variables will be automatically expanded in arithmeic comparasion context.

File size format( from le --help ):
Single alphabet letter, e.g. K M G T
1K  = 1024 Byte
1KB = 1000 Byte

use `cp -ru` instead of `cp -r` # do not overwrite newer files, one can never be too cautious

About hard-link:
resource: `info ln`

hard-links point to the data of a file, technically, 'inode', they do not occupy more file system space:
Assume that a file A exist in current dir
$> ln A B
$> du -kTh -d0
Check if the output is changed

COLUMNS=80 man bash, 可以调整manuel输出的宽度

十进制转16进制数字字符串:
$> printf '%x' "$num"

reverse:
$> echo $((16#$num))

Gpt wisdoms:
FIFO 是同步通信机制。
仅写端打开 FIFO 时，如果没有读端，就会 阻塞等待。
同理，仅读端打开 FIFO 时，如果没有写端，也会 阻塞等待。

stdout stderr默认指向同一个resource -> terminal device

使用`man bash`观察metacharacters and control operator
发现control operator都是metacharacter的组合，是否可以这样认为:
metacharacter完成基本的语词分割，然后部分metacharacters还被赋予了特殊的含义，比如重定向或者控制功能

关注shopt - login_shell选项( how to know if current shell is a login shell ? )

辨析前后台进程组概念, 为什么会有这种区别?

Hard-link:
出现在文件系统多个位置的同一份数据。
典型用途:
~/.rc 目录下有一些配置文件数据(.vimrc .bashrc)
Now I wish to use VCS to manage .rc directory, at the meantime, fire up config files,
then I will use hard-link

Why is soft links not working here?

The reason of unexpected exit of v2ray in .bashrc:
the process group id(pgid) of the v2ray process is the same as the login shell itself, so they are in the same process group,
When I type Ctrl-C, the v2ray process receive the interrupt and exit immediately.

`sleep` running background will ignore interrupt signal (signal 2)

The complexibility of subshells:
$> ( sleep 5; sleep 10 ; ) & while a=`ps | grep -qE "($$|$!)"` ; do echo "$a"; sleep 1;  done
1. That is a bit tricky, why does it work?

Note the exit status of variable assignments

From `man bash - pipelines`:
This connection (refer to the connection of pipe), if performed before any direction.
Consider this as an anonymous pipe, in constract to named pipe, e.g. pipe created with 'mkpipe'

Subshell is an environment with no need to reinitialize itself.

a=1
echo $(a=1 echo $a)
$> (empty)
It means what? Explain it.

Asynchronous command: the command suffice with a ampersand

/dev/stdin  is an alias for /proc/self/fd/0
/dev/stdout is an alias for /proc/self/fd/1
/dev/stderr is an alias for /proc/self/fd/2
In shell programming, they can all be redirected.

When the prompt is dispalyed, it means the shell is ready to read command from your terminal.

About xterm title:
If you failed to change xterm title, you can check if:
$> set | grep -i prompt
PROMPT_COMMAND=( [0]=....  [1]="printf '\e]0..........\a'" )

Yet another difference between login shell and non-login shell:
The jobs created in login shell shall exit upon shell exiting, however, the jobs in non-login shell will not.
